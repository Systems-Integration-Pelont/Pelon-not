// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using apiUsuariosCuenta.contexts;

#nullable disable

namespace apiUsuariosCuenta.Migrations
{
    [DbContext(typeof(BankContexts))]
    [Migration("20250211224457_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("apiUsuariosCuenta.entities.ATM", b =>
                {
                    b.Property<Guid>("ATMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<double?>("Funds")
                        .HasColumnType("double precision");

                    b.HasKey("ATMID");

                    b.ToTable("Atms");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.ATMInterUserTransaction", b =>
                {
                    b.Property<Guid>("ATMInterUserTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ATMID")
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("CuentaAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromBankAccountID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InterUserTransactionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToBankAccountID")
                        .HasColumnType("uuid");

                    b.HasKey("ATMInterUserTransactionId");

                    b.HasIndex("ATMID");

                    b.HasIndex("CuentaAccountId");

                    b.HasIndex("InterUserTransactionTypeId");

                    b.ToTable("ATMInterUserTransactions");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.Cuenta", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int?>("Code")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.InterUserTransaction", b =>
                {
                    b.Property<Guid>("InterUserTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AmountAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FromBankAccountID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InterUserTransactionTypeId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ToBankAccountID")
                        .HasColumnType("uuid");

                    b.HasKey("InterUserTransactionID");

                    b.HasIndex("AmountAccountId");

                    b.HasIndex("InterUserTransactionTypeId");

                    b.ToTable("InterUserTransactions");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.InterUserTransactionType", b =>
                {
                    b.Property<Guid>("InterUserTransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InterUserTransactionTypeID");

                    b.ToTable("InterUserTransactionTypes");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.Rol", b =>
                {
                    b.Property<Guid>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AccessLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RolId");

                    b.ToTable("Rols");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.SelfATMOperation", b =>
                {
                    b.Property<Guid>("SelfATMOperationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ATMID")
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("BankAcountID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CuentaAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SelfOperationTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("SelfATMOperationID");

                    b.HasIndex("ATMID");

                    b.HasIndex("CuentaAccountId");

                    b.HasIndex("SelfOperationTypeId");

                    b.ToTable("SelfAtmOperations");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.SelfOperation", b =>
                {
                    b.Property<Guid>("SelfOperationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ATMID")
                        .HasColumnType("uuid");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("BankAcountID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CuentaAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SelfOperationTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("SelfOperationID");

                    b.HasIndex("ATMID");

                    b.HasIndex("CuentaAccountId");

                    b.HasIndex("SelfOperationTypeId");

                    b.ToTable("SelfOperations");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.SelfOperationType", b =>
                {
                    b.Property<Guid>("SelfOperationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SelfOperationTypeId");

                    b.ToTable("SelfOperationTypes");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.UserAccess", b =>
                {
                    b.Property<Guid>("UserAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("RolID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserAccessId");

                    b.HasIndex("RolID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAccesses");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.Usuario", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.ATMInterUserTransaction", b =>
                {
                    b.HasOne("apiUsuariosCuenta.entities.ATM", "Atm")
                        .WithMany()
                        .HasForeignKey("ATMID");

                    b.HasOne("apiUsuariosCuenta.entities.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaAccountId");

                    b.HasOne("apiUsuariosCuenta.entities.InterUserTransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("InterUserTransactionTypeId");

                    b.Navigation("Atm");

                    b.Navigation("Cuenta");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.Cuenta", b =>
                {
                    b.HasOne("apiUsuariosCuenta.entities.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.InterUserTransaction", b =>
                {
                    b.HasOne("apiUsuariosCuenta.entities.Cuenta", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountAccountId");

                    b.HasOne("apiUsuariosCuenta.entities.InterUserTransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("InterUserTransactionTypeId");

                    b.Navigation("Amount");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.SelfATMOperation", b =>
                {
                    b.HasOne("apiUsuariosCuenta.entities.ATM", "Atm")
                        .WithMany()
                        .HasForeignKey("ATMID");

                    b.HasOne("apiUsuariosCuenta.entities.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaAccountId");

                    b.HasOne("apiUsuariosCuenta.entities.SelfOperationType", "Type")
                        .WithMany()
                        .HasForeignKey("SelfOperationTypeId");

                    b.Navigation("Atm");

                    b.Navigation("Cuenta");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.SelfOperation", b =>
                {
                    b.HasOne("apiUsuariosCuenta.entities.ATM", "Atm")
                        .WithMany()
                        .HasForeignKey("ATMID");

                    b.HasOne("apiUsuariosCuenta.entities.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaAccountId");

                    b.HasOne("apiUsuariosCuenta.entities.SelfOperationType", "Type")
                        .WithMany()
                        .HasForeignKey("SelfOperationTypeId");

                    b.Navigation("Atm");

                    b.Navigation("Cuenta");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("apiUsuariosCuenta.entities.UserAccess", b =>
                {
                    b.HasOne("apiUsuariosCuenta.entities.Rol", "rol")
                        .WithMany()
                        .HasForeignKey("RolID");

                    b.HasOne("apiUsuariosCuenta.entities.Usuario", "user")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("rol");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
